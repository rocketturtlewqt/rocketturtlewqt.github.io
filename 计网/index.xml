<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计网s on RocketTurtle</title>
    <link>https://rocketturtlewqt.github.io/%E8%AE%A1%E7%BD%91/</link>
    <description>Recent content in 计网s on RocketTurtle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Jun 2021 10:18:51 +0800</lastBuildDate><atom:link href="https://rocketturtlewqt.github.io/%E8%AE%A1%E7%BD%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web缓存</title>
      <link>https://rocketturtlewqt.github.io/%E8%AE%A1%E7%BD%91/web%E7%BC%93%E5%AD%98/</link>
      <pubDate>Fri, 04 Jun 2021 10:18:51 +0800</pubDate>
      
      <guid>https://rocketturtlewqt.github.io/%E8%AE%A1%E7%BD%91/web%E7%BC%93%E5%AD%98/</guid>
      <description>客户通过web缓存请求对象 客户通过web缓存请求对象
大致工作流程  客户浏览器向代理服务器发送请求 代理服务器先检查本地是否存储了该对象的副本，若有，则直接返回响应报文，实体体中包含该对象。若没有，则再向初始服务器发送对该对象的请求报文 初始服务器返回包含该对象的响应报文 代理服务器收到包含该对象的响应报文，将该对象的副本保存在本地，再向客户浏览器返回包含该对象的响应报文   代理服务器具有双重角色，即客户和服务器  </description>
    </item>
    
    <item>
      <title>应用层cookie</title>
      <link>https://rocketturtlewqt.github.io/%E8%AE%A1%E7%BD%91/%E5%BA%94%E7%94%A8%E5%B1%82cookie/</link>
      <pubDate>Fri, 04 Jun 2021 10:05:31 +0800</pubDate>
      
      <guid>https://rocketturtlewqt.github.io/%E8%AE%A1%E7%BD%91/%E5%BA%94%E7%94%A8%E5%B1%82cookie/</guid>
      <description>用cookie跟踪用户状态 用cookie跟踪用户状态
cookie的工作过程  以访问amazon网站为例   用户访问amazon网站 amazon web服务器为用户生成一个识别码，并在后端数据库中生成一个表项，返回响应报文时，在首部行添加 Set-cookie:&amp;lt;识别码&amp;gt; 浏览器接收响应报文，在管理cookie的文件中添加一行关于这个cookie的信息 当浏览器用户再次请求amazon web服务器时，在请求报文中携带cookie字段，值为web服务器为用户分配的识别码  </description>
    </item>
    
    <item>
      <title>应用层协议http</title>
      <link>https://rocketturtlewqt.github.io/%E8%AE%A1%E7%BD%91/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AEhttp/</link>
      <pubDate>Sat, 29 May 2021 18:28:24 +0800</pubDate>
      
      <guid>https://rocketturtlewqt.github.io/%E8%AE%A1%E7%BD%91/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AEhttp/</guid>
      <description>基本常识  Web页面是由对象组成的。这个对象可以是一个html文件，也可以是图片等，且它们可以通过一个url地址寻找。 浏览器实现了HTTP的客户端，Web服务器实现了HTTP的服务器端。 HTTP是一个无状态的协议。当HTTP客户端多次请求同一个对象，HTTP服务器端并不会因为此前返回过这个对象就不再响应，而是每请求一次就响应一次。 客户端套接字是客户端应用进程与TCP连接之门，负责HTTP请求报文的发送和响应报文的接收。服务端套接字是服务端应用进程与TCP连接之门，负责HTTP响应报文的发送和请求报文的接收。  持续连接与非持续连接 非持续连接  http1.0 假若服务器目前有一个html文件和10张图片需要响应，那么对于非持续连接分为以下几步   http客户端通过80端向http服务端发起一条tcp连接 建立tcp连接后，http客户端将http请求报文通过80端口发送给http服务端 http服务端进程通过套接字接收http请求报文，从存储器中读取响应的内容，并通过套接字发送给http客户端 服务端进程通知tcp断开tcp连接（要等http客户端接收到响应报文后才会真正断开） http客户端接收到响应报文，断开tcp连接 有几个对象就重复几遍1~5   建立tcp的过程还伴随有三次握手，http请求报文是随着第三次握手发送给http服务端的  持续连接  http1.1 持续连接使得传输的对象能够在同一条tcp连接上进行。对于非持续连接，完成一个对象的请求和响应过程都需要2个RTT时间，客户端和服务端都要为每一条tcp连接分配缓存和变量，所以持续连接在一定程度上节约了时间  http报文格式 http请求报文格式 http请求报文格式
 第一行为请求行，由方法字段、URL字段和协议版本组成 之后的行称为首部行  http请求报文的通用格式
 一般当请求报文的方法字段为GET时，实体体为空。当为POST时，通常以表单形式提交，实体体中的内容为表单中输入的值   HEAD方法类似于GET方法。当服务器收到一个HEAD请求时，会使用HTTP报文作为响应，不过不会返回任何响应对象 PUT方法。它允许用户上传对象到指定web服务器上的指定路径 DELETE方法。它允许用户或应用程序删除web服务器上的指定对象  http响应报文格式 http响应报文格式
 第一行为状态行，由协议版本、状态码和描述组成 之后的六行是首部行 最后一行是实体体  http响应报文的通用格式</description>
    </item>
    
  </channel>
</rss>
